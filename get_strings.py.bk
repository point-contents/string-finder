import ast
import json
import traceback
import types
import re
import argparse

try:
    # Python 2.6
    StringTypes = (types.StringType, types.UnicodeType)
except AttributeError:
    # Python 3.0
    StringTypes = (str, bytes)

RegexType = type(re.compile('string'))
FStringType = type(f"fstring")

class CustomNodeTransformer(ast.NodeTransformer):
    all_variables = []

    def visit_Assign(self, node):
        targets = node.targets[0].__dict__
        values = node.value.__dict__

        try:
            variable_id = targets.get('id')
            #print(variable_id)
            variable_value = values.get('value')
            #print(variable_value)
            variable_location = values.get('lineno')
            #print(variable_location)

            if isinstance(variable_value, (str, RegexType, FStringType)):
                item = {
                    "id": variable_id,
                    "value": variable_value,
                    "lineno": variable_location
                }

                self.all_variables.append(item)
        except:
            traceback.print_exc()
            pass

        return node

    def visit_Constant(self, node):
        if isinstance(node.value, str):
            self.all_variables.append(
            {
                "unnamed_string": node.value,
                "lineno": node.__dict__.get('lineno')
            })
            print(node.__dict__)
            keep = input("keep going?")

    def visit_JoinedStr(self, node):
            print(node.__dict__)
            keep = input("keep going?")


    def visit_FunctionDef(self, node):
        num_of_arguments = len(node.args.__dict__.get('args'))

        for i in range(0, num_of_arguments):
            try:
                function_args = node.args.__dict__.get('args')
                function_variable_id = function_args[i].arg

                strings_assigned_in_function = node.args.__dict__.get('defaults')

                if i < len(strings_assigned_in_function):
                    function_string_value = strings_assigned_in_function[i].value
                    string_line_no = node.args.__dict__.get('lineno')

                    if function_variable_id and function_string_value:
                        item = {
                            "id": function_variable_id,
                            "value": function_string_value,
                            "lineno": string_line_no
                        }
                        self.all_variables.append(item)

            except:
                #print(node.__dict__)
                #print(f"number of arguments in function: {num_of_arguments}")
                #print(f"args: {strings_assigned_in_function}")
                traceback.print_exc()
                #print("\n\n")
                pass



    def report(self):
        print(json.dumps(self.all_variables))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', "--file", help="file to parse")
    args = parser.parse_args()

    source_file = "parse.py"
    if args.file:
        source_file = args.file

    with open(source_file, "r") as source:
        nodes = ast.parse(source.read())
        transformer = CustomNodeTransformer()
        transformer.visit(nodes)
        transformer.report()


if __name__ == '__main__':
    main()
